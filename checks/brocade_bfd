#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author: Tobias Brunner <tobias.brunner@nine.ch>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# set default value of variable (user can override in main.mk)
# routes received:
brocade_bfd_default_values = (1, 0)

def inventory_brocade_bfd(info):
   inventory = []
   if len(info) > 0:
       for line in info:
           # check line[0] bfdSessApplicationId
           # 14 = ipv4, 35 = ipv6
           if line[0] == "14" or line[0] == "35":
               # append line[1] bfdSessDiscriminator
               inventory.append( (line[1], None) )
       return inventory

def check_brocade_bfd(item, _no_params, info):
   for sesstype, sessid, sessstate, sessaddr in info:
       if sessid == item:
           if sessstate == "1":
               return (2, "CRITICAL - BFD session " + sessid + " with " + sessaddr + " is adminDown(1)")
           if sessstate == "2":
               return (2, "CRITICAL - BFD session " + sessid + " with " + sessaddr + " is down(2)")
           if sessstate == "3":
               return (1, "WARNING - BFD session " + sessid + " with " + sessaddr + " is init(3)")
           if sessstate == "4":
               return (0, "OK - BFD session " + sessid + " with " + sessaddr + " is up(4)")
           else:
               return (3, "UNKNOWN - BFD session " + sessid + " with " + sessaddr + " is unknown(" + sessstate +")") 
   return (3, "UNKNOWN - BFD session state is not readable")

check_info['brocade_bfd'] = {
    "inventory_function"      : inventory_brocade_bfd,
    "check_function"          : check_brocade_bfd,
    "service_description"     : "BFD session %s",
    "has_perfdata"            : True,
    "group"                   : "bfd",
    "snmp_info"               : ( ".1.3.6.1.4.1.1991.3.3.1.1.2.1", [ "2", "3", "6", "14" ]),
    "snmp_scan_function"      : lambda oid: "brocade" in oid(".1.3.6.1.2.1.1.1.0").lower(),
}
